
* 패키지(package)

- 클래스는 크게 2종류가 있습니다. 하나는 개발자가 직접 만들어 사용하는 
 사용자 정의 클래스이고, 다른 하나는 JDK(Java Development Kit)안에 포함되어 있거나,  
  다른 개발자들이 미리 만들어 놓은 클래스들이 있습니다.



- 그런데 이런 클래스들은 매우 종류가 많고 비슷한 기능들을 분류시켜야 할 필요성이 
   있기 때문에 서로 관계가 있는 클래스들을 패키지로 묶어서 관리합니다.



- 현재 클래스에서 다른 패키지의 외부 클래스를 사용하고 싶은 경우에 import 키워드로 
  해당 클래스의 전체 경로(패키지 명까지 포함)를 지정해줘야 합니다.



ex) import java.util.Scanner;

- 만약 해당 패키지 안에 들어있는 모든 클래스를 사용하고 싶다면 * 기호를 넣어주면 됩니다.

ex) import java.util.*;

- package 선언 방법

1. 사용자가 임의로 패키지를 만드려면 클래스의 가장 윗부분에 패키지 구문을 포함시키면 됩니다.

ex) package store;

2. 패키지 이름은 영문 소문자로 지정하는 것을 권장합니다.
3. 대분류와 소분류 패키지를 구분할 때는 .(dot)을 사용합니다.
4. 최상위 패키지의 이름은 java로 시작할 수 없습니다. java패키지는 표준 API들의 모음을 
   구성해놓은 패키지입니다.
5. 자바의 키워드들도 패키지이름으로 사용할 수 없습니다.





* 기본 타입(primitive type) vs 참조 타입(reference type)

- 기본 타입이란 정수, 실수, 문자, 논리 값을 저장하는 데이터 타입입니다.
- 참조 타입이란 객체의 주소를 참조하는 타입으로 배열, 클래스, 인터페이스 타입을 말합니다.
- 기본 타입으로 선언된 변수는 실제 값(value)을 변수 안에 저장하지만, 참조 타입으로 선언된 
  변수는 메모리의 주소값을 변수 안에 저장합니다.
- 참조 타입으로 선언된 변수는 스택(stack)영역에 주소값을 저장하고 내부의 실제 값은 
  힙(heap)영역에 저장합니다.



* 참조 타입 String과 객체 동등 비교 메서드 equals()

- 자바는 문자열이 동일하다면 String 객체를 공유하도록 되어있습니다.
그래서 단순히 문자열을 String 변수에 할당한다면 같은 주소값을 갖게 됩니다.

ex) String str1 = "Hello";
      String str2 = "Hello";
   --> str1 == str2 -> true

- 그러나 new키워드를 사용해서 String객체를 직접 heap영역에 생성한다면 문자열의 내용이 
 같더라도 다른 주소값을 가지게 되므로 동등, 비동등 연산자(==, !=)의 결과가 false로 
 나오게 됩니다.

ex) String str3 = new String("Hello");
      String str4 = new String("Hello");
    --> str3 == str4 -> false

- 그래서 동일 String객체이든 다른 String 객체이든 상관없이 문자열의
   내용 값 그자체를 비교할 때는 equals() 메서드를 사용해야 합니다.







* 객체 지향 프로그래밍 기술

- OOP 기술에는 은닉(캡슐화:Encapsulation), 상속(Inheritance), 
  다형성(Polymorphism)이 있습니다.










* 상속(Inheritance)

- OOP에서 상속은 기존의 클래스를 확장하여 새로운 클래스를 이끌어내는 것을 의미합니다.

- 상속 관계는 is a 관계를 만족하는 관계입니다.
   ex) 돌고래 is a 포유류 --> 돌고래는 포유류의 속성을 가지고 있다.


- 상속은 기존의 코드를 재사용함으로써 불필요한 코드를 재작성하는 번거로움을 없앨 수 있고, 
  새로운 클래스를 만드는 시간과 노력을 줄일 수 있습니다.



- 어떤 클래스가 다른 클래스로부터 상속을 받아 만들어지면 새롭게 만들어진 클래스를 
  자식(child or sub)클래스라고 부르며, 멤버변수와 메서드를 물려준 클래스는 
  부모(parent or super)클래스라고 부릅니다.



- 상속을 하면 부모클래스의 멤버변수와 메서드가 자식클래스에 상속이 됩니다. 
  그러나 부모클래스의 생성자는 상속이 되지 않습니다.



- 상속을 사용하는 키워드는 extends 입니다.



- 상속을 하더라도 부모 클래스에서 private 접근제한을 갖는 멤버변수와 메서드는 
  상속대상에서 제외됩니다.



- 자바의 모든 클래스는 Object 클래스를 상속받고 있습니다. Object클래스는 
  자바의 최상위 클래스입니다.








* 메서드 재정의(Overriding)



- 메서드 재정의란 부모클래스로부터 상속받은 메서드를 자식클래스에서 행위를 바꾸거나 
  보완하기 위해 다시 정의해서 사용하는 것을 말합니다.



- 이는 부모클래스에서 특별한 용도로 사용하던 메서드를 자식클래스에서 다른 용도로 사용할   
  때 필요합니다.



- 부모클래스의 모든 메서드가 자식클래스에 맞게 설계되어 있다면 가장 이상적인 상속이지만, 
  특정 메서드는 자식 클래스가 사용하기에 적합하지 않을 수도 있습니다.



- 이 경우 상속된 일부 메서드는 자식클래스에서 재정의하여 사용해야 합니다.



- 메서드가 자식클래스에서 재정의되었다면 자식객체를 통해 메서드를 호출했을 때 
  새롭게 재정의된 메서드가 호출됩니다.



- 메서드 재정의 규칙
1. 반드시 상속을 전제로 해야합니다.
2. 반드시 반환 유형이 같아야 합니다.
3. 메서드 이름이 같아야 합니다.
4. 매개 변수 선언이 정확히 일치해야 합니다.
5. 접근제한자는 같거나 더 제한이 없어야 합니다.(more public)




* 중복(Overloading)



- 자바는 메서드나 생성자의 중복 선언을 허용합니다.



- 중복은 메서드 또는 생성자를 선언할 때 이름은 같지만 매개 변수의 유형이나 개수를 다르게 
  선언해 놓는 것을 의미합니다.



- 중복을 사용하면 하나의 메서드로 매개 변수의 유형에 따라 다른 동작이 실행되게 합니다.



- 중복의 조건

1. 이름이 같아야 합니다.
2. 접근제한자나 반환유형은 영향을 미치지 않습니다.
3. 매개 변수의 유형이 달라야 합니다.
4. 매개 변수의 개수가 달라야 합니다.
5. 매개 변수의 순서가 달라야 합니다.

















