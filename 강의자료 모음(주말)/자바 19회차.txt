


* Collection

- 자바 프로그램에서 객체를 객체들의 모음 형식으로 관리할 수 있는 방법을 제공하는 
  클래스들을 컬렉션이라고 부릅니다.



- 컬렉션은 배열과 유사하지만 데이터를 저장/조회/수정/삭제하는 작업을 쉽게 처리할 수 있으며,
  동적인 크기를 갖는다는 장점이 있습니다.



- 컬렉션 계열은 Set/List/Map 등의 인터페이스가 있으며 이를 구현한 클래스를 이용하면 
  객체들을 모음저장할 수 있습니다.




* List 컬렉션

- List 컬렉션은 객체를 인덱스로 관리하기 때문에 객체를 저장하면 자동으로 
 인덱스 번호가 부여되고 인덱스를 통해 객체를 검색, 삭제할 수 있는 기능을 제공합니다.

- List 는 객체를 순서대로 저장하며 동일한 객체를 중복 저장할 수 있습니다.




* List 계열 주요 메서드

- 객체 추가 기능

1. add(E e): 주어진 객체를 List의 맨 끝부분에 추가.
2. add(int index, E e): 주어진 인덱스에 객체를 추가.
3. set(int index, E e): 주어진 인덱스에 저장된 객체를 주어진 객체로 바꿈.

- 객체 검색 기능

1. contains(Object o): 주어진 객체가 저장되어있는지의 여부를 판단.
2. get(int index): 주어진 인덱스에 저장되어 있는 객체를 리턴.
3. isEmpty(): 컬렉션이 비어있는지의 여부를 판단.
4. size(): 저장되어 있는 전체 객체 수를 리턴.

- 객체 삭제 기능

1. clear(): 저장된 모든 객체를 삭제.
2. remove(int index): 주어진 인덱스에 저장된 객체를 삭제.
3. remove(Object o): 주어진 객체를 삭제.


* ArrayList


- ArrayList 클래스는 List 인터페이스의 구현 클래스로 ArrayList에 객체를 추가하면 
  객체가 인덱스로 관리됩니다.



- 일반 배열과 ArrayList는 인덱스로 객체를 관리한다는 점에서는 유사하지만 
  배열은 생성될 때 크기가 고정되고, 사용 중에 크기를 변경할 수 없지만 
  ArrayList는 저장 용량을 초과한 객체들이 들어오면 자동으로 저장 용량을 증가시킵니다.



- 기본 생성자로 ArrayList 객체를 생성하면 내부에 10개의 객체를 저장할 수 있는 
  초기 용량을 가지게 되며 저장되는 객체 수가 증가하면 용량이 자동적으로 증가합니다.



- ArrayList에 특정 인덱스의 객체를 제거하면 자동으로 바로 뒤 인덱스부터 마지막 
  인덱스까지 모두 앞으로 1칸씩 당겨집니다.




* LinkedList

- LinkedList는 List 인터페이스를 구현한 클래스이며 ArrayList와 사용 방법은 같지만 
  내부 구조는 완전히 다릅니다.

- ArrayList는 내부 배열에 객체를 저장하여 인덱스로 관리하지만 LinkedList는 
  인접 참조를 링크하여 체인처럼 관리합니다.

- ArrayList는 특정 인덱스의 객체를 제거하면 뒤의 모든 객체가 앞으로 한칸씩 당겨지지만,
  LinkedList는 특정 인덱스의 객체를 제거하면 앞 뒤 링크만 변경되고 나머지 링크는 
  변경되지 않아 빈번한 객체의 삭제와 삽입이 일어나는 로직에서는 ArrayList보다 
  좋은 성능을 발휘합니다.








